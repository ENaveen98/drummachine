{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","sound","Q","W","E","A","S","D","Z","X","C","keyCodes","audioName","App","className","React","Component","DrumPad","props","state","keys","text","keyPressed","displayClipName","bind","handleKeyPress2","document","addEventListener","this","removeEventListener","event","playKey","keyCode","setState","name","buttons","map","e","updateDisplay","id","DrumKey","pressed","playSound","handleKeyPress","getElementById","currentTime","play","onClick","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73f221b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst sound = {\n  Q: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n  W: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n  E: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n  A: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n  S: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n  D: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n  Z: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n  X: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n  C: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n};\n\nconst keyCodes = {\n  Q: 81,\n  W: 87,\n  E: 69,\n  A: 65,\n  S: 83,\n  D: 68,\n  Z: 90,\n  X: 88,\n  C: 67,\n};\n\nconst audioName = {\n  Q: \"Heater 1\",\n  W: \"Heater 2\",\n  E: \"Heater 3\",\n  A: \"Heater 4\",\n  S: \"Clap\",\n  D: \"Open HH\",\n  Z: \"Kick n Hat\",\n  X: \"Kick\",\n  C: \"Closed HH\",\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumPad />\n      </div>\n    );\n  }\n}\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keys: [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"],\n      text: \"hola\",\n      keyPressed: false,\n    };\n    this.displayClipName = this.displayClipName.bind(this);\n    this.handleKeyPress2 = this.handleKeyPress2.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress2);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress2);\n  }\n  handleKeyPress2(event) {\n    for (let playKey in keyCodes) {\n      if (event.keyCode === keyCodes[playKey]) {\n        this.setState({ text: audioName[playKey], keyPressed: true });\n      }\n    }\n  }\n\n  displayClipName(name) {\n    this.setState({\n      text: name,\n    });\n  }\n\n  render() {\n    var buttons = this.state.keys.map((e) => (\n      <DrumKey\n        playKey={e}\n        keyCode={keyCodes[e]}\n        updateDisplay={this.displayClipName}\n      />\n    ));\n    return (\n      <div id=\"drum-machine\">\n        {/* <div id=\"display\">\n          {this.state.keyPressed && <p>{this.state.text}</p>}\n          {!this.state.keyPressed && <p>default</p>}\n        </div> */}\n        <div id=\"display\">\n          <p>{this.state.text}</p>\n        </div>\n        {/* <DisplayKey id=\"display\" /> */}\n        <div id=\"buttons\">\n          {buttons}\n          {/* <DisplayKey /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass DrumKey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pressed: false };\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSound();\n      this.setState({ pressed: true });\n    }\n  }\n  playSound(e) {\n    // let audio = new Audio(sound[this.props.playKey]);\n    // audio.play();\n    const sound = document.getElementById(this.props.playKey);\n    sound.currentTime = 0;\n    sound.play();\n    this.setState({ pressed: true });\n    this.props.updateDisplay(audioName[this.props.playKey]);\n  }\n\n  render() {\n    // if (this.state.pressed) {\n    //   var displayMessage = audioName[this.props.playKey];\n    // } else {\n    //   var displayMessage = \"None\";\n    // }\n    return (\n      <div\n        id={\"key_\" + this.props.playKey}\n        onClick={this.playSound}\n        className=\"drum-pad\"\n      >\n        <audio\n          className=\"clip\"\n          id={this.props.playKey}\n          src={sound[this.props.playKey]}\n        ></audio>\n        {this.props.playKey}\n        {/* <div>{displayMessage}</div> */}\n      </div>\n\n      // <div id={\"key_\" + this.props.playKey} className=\"drum-pad\">\n      //   <button onClick={this.playSound}>{this.props.playKey}</button>\n      // </div>\n    );\n  }\n}\n\n// class DisplayKey extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { text: \"None\" };\n//     this.handleKeyPress3 = this.handleKeyPress3.bind(this);\n//   }\n//   componentDidMount() {\n//     document.addEventListener(\"keydown\", this.handleKeyPress3);\n//   }\n//   componentWillUnmount() {\n//     document.removeEventListener(\"keydown\", this.handleKeyPress3);\n//   }\n//   handleKeyPress3(event) {\n//     for (let playKey in keyCodes) {\n//       if (event.keyCode === keyCodes[playKey]) {\n//         this.setState({ text: audioName[playKey] });\n//       }\n//     }\n//   }\n//   render() {\n//     return <p>{this.state.text}</p>;\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}